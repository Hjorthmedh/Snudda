#!/bin/bash -l
#SBATCH --partition=main
#SBATCH -t 0:59:00
#SBATCH -J snuddaInputTuning
#SBATCH -A snic2021-5-492
#SBATCH --nodes=1

echo "JOB START "`date` 
#Set NETWORK_DIR, PROJECT_DIR, SNUDDA_DATA, and more 
source setup_env.sh

# This is important, otherwise Snudda import will fail
unset DISPLAY


# Synapse file
SNUDDA_DIR=$PROJECT_DIR/Snudda/snudda
echo "Project directory is = $SNUDDA_DIR"
NETWORK_INFO_FILE=$NETWORK_DIR/network-synapses.hdf5
NETWORK_INPUT_FILE=$NETWORK_DIR/input-spikes.hdf5
NETWORK_VOLTAGE_FILE=$NETWORK_DIR/simulation/voltage-trace-${SLURM_JOBID}.txt

echo "Network dir: "$NETWORK_DIR

##############
echo "Loading environment"
module load snic-env
# --- I have tried with the gnu compiler, and also with the cray compiler
module swap PrgEnv-cray PrgEnv-gnu
module unload cray-libsci atp
export CRAYPE_LINK_TYPE=dynamic
export CRAY_ROOTFS=DSL

########## Needed for NEURON
echo "Setting paths needed for Neuron"
L=$PROJECT_DIR/snudda_env
LN=$L/neuron
export PATH=$L/bin:$LN/bin:$PATH
export LD_LIBRARY_PATH=$MPICH_DIR/lib:$LD_LIBRARY_PATH
export PYTHONPATH=$L/lib/python3.8/site-packages:$PYTHONPATH
export PYTHONPATH=$LN/lib/python:$PYTHONPATH


##################################################################################################
#neurons_path=$SNUDDA_DATA/neurons/striatum/dspn/str-dspn-e150602_c1_D1-mWT-0728MSN01-v20211026
neurons_path=$SNUDDA_DATA/neurons/striatum/$neuronType/$singleNeuronType
#steps=$(($numInputMax-$numInputMin))
steps=250
##################################################################################################
srun -n 1 python $SNUDDA_DATA_TOOLS/bgmod2bgdata.py --source $source --morphSource $neurons_path --destination $neurons_path
if [ $? != 0 ]; then
	echo "Something went wrong during bgmod2bgdata.py aborting!"
	exit -1
fi
##################################################################################################
input_type=cortical
no_meta_input=--no_meta_input
echo "STARTING input_tuning setup"
echo $NETWORK_DIR --neurons $neurons_path --neuronType $neuronType --singleNeuronType $neurons_path --numInputMin $numInputMin --numInputMax $numInputMax --inputFrequency '[1.0]' --numInputSteps $steps --inputDuration 10.0 --input_type $input_type $no_meta_input 
srun -n 1 python $SNUDDA_DIR/input/input_tuning.py setup $NETWORK_DIR --neurons $neurons_path --neuronType $neuronType --singleNeuronType $neurons_path --numInputMin $numInputMin --numInputMax $numInputMax --inputFrequency '[1.0]' --numInputSteps $steps --inputDuration 10.0 --input_type $input_type $no_meta_input 

echo "Setup finished"
if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning setup, aborting!"
	exit -1
fi

echo "Starting simulation job"
srun -n 128 $SNUDDA_DIR/../examples/parallel/KTH_PDC/Dardel_inputTuning/x86_64/special -mpi -python $SNUDDA_DIR/input/input_tuning.py simulate $NETWORK_DIR

if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning simulation, aborting!"
	exit -1
fi

srun -n 1 python $SNUDDA_DIR/input/input_tuning.py analyse $NETWORK_DIR --input_type $input_type
if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning analyse, aborting!"
	exit -1
fi

srun -n 1 python $SNUDDA_DIR/plotting/plot_network_simulation.py --nametag $NETWORK_NAME --doHistRast 0 --doTraces 1 --doInpRast 1 --inputFile "input.hdf5" --input_type $input_type --neuronType $neuronType
if [ $? != 0 ]; then
	echo "Something went wrong during plot_network_simulation.py, aborting!"
	exit -1
fi

srun -n 1 python $SNUDDA_DATA_TOOLS/analyse_data_and_create_meta.py $NETWORK_DIR --networkName $NETWORK_NAME --neuronsPath $neurons_path --input_type $input_type --neuronType $neuronType --singleNeuronType $singleNeuronType --snudda_data_tools $SNUDDA_DATA_TOOLS
if [ $? != 0 ]; then
	echo "Something went wrong during analyse_data_and_create_meta.py aborting!"
	exit -1
fi

################################################################################################
input_type=thalamic
no_meta_input=--no_meta_input
srun -n 1 python $SNUDDA_DIR/input/input_tuning.py setup $NETWORK_DIR --neurons $neurons_path --neuronType $neuronType --singleNeuronType $neurons_path --numInputMin $numInputMin --numInputMax $numInputMax --inputFrequency '[1.0]' --numInputSteps $steps --inputDuration 10.0 --input_type $input_type $no_meta_input

echo "Setup finished"
if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning setup, aborting!"
	exit -1
fi

echo "Starting simulation job"
srun -n 128 $SNUDDA_DIR/../examples/parallel/KTH_PDC/Dardel_inputTuning/x86_64/special -mpi -python $SNUDDA_DIR/input/input_tuning.py simulate $NETWORK_DIR

if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning simulation, aborting!"
	exit -1
fi

srun -n 1 python $SNUDDA_DIR/input/input_tuning.py analyse $NETWORK_DIR --input_type $input_type
if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning analyse, aborting!"
	exit -1
fi

srun -n 1 python $SNUDDA_DIR/plotting/plot_network_simulation.py --nametag $NETWORK_NAME --doHistRast 0 --doTraces 1 --doInpRast 1 --inputFile "input.hdf5" --input_type $input_type --neuronType $neuronType
if [ $? != 0 ]; then
	echo "Something went wrong during plot_network_simulation.py, aborting!"
	exit -1
fi

srun -n 1 python $SNUDDA_DATA_TOOLS/analyse_data_and_create_meta.py $NETWORK_DIR --networkName $NETWORK_NAME --neuronsPath $neurons_path --input_type $input_type --neuronType $neuronType --singleNeuronType $singleNeuronType --snudda_data_tools $SNUDDA_DATA_TOOLS
if [ $? != 0 ]; then
	echo "Something went wrong during analyse_data_and_create_meta.py aborting!"
	exit -1
fi

#################################################################################################
no_meta_input=
srun -n 1 python $SNUDDA_DIR/input/input_tuning.py setup $NETWORK_DIR --neurons $neurons_path --neuronType $neuronType --singleNeuronType $neurons_path --numInputMin $numInputMin --numInputMax $numInputMax --inputFrequency '[1.0]' --numInputSteps $steps --inputDuration 10.0 --input_type $input_type $no_meta_input

echo "Setup finished"
if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning setup, aborting!"
	exit -1
fi

echo "Starting simulation job"
srun -n 128 $SNUDDA_DIR/../examples/parallel/KTH_PDC/Dardel_inputTuning/x86_64/special -mpi -python $SNUDDA_DIR/input/input_tuning.py simulate $NETWORK_DIR

if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning simulation, aborting!"
	exit -1
fi

sleep 5 #To avoid crash that happens at this point sometimes: "srun: error: Unable to create step for job 198913: Job/step already completing or completed"
input_type=corticothalamic #used as dummy to name figures now, but perhaps implement later to tune both types of inputs in one go (perhaps use no_meta_input)
srun -n 1 python $SNUDDA_DIR/input/input_tuning.py analyse $NETWORK_DIR --input_type $input_type
if [ $? != 0 ]; then
	echo "Something went wrong during input_tuning analyse, aborting!"
	exit -1
fi

srun -n 1 python $SNUDDA_DIR/plotting/plot_network_simulation.py --nametag $NETWORK_NAME --doHistRast 0 --doTraces 1 --doInpRast 1 --inputFile "input.hdf5" --input_type $input_type --neuronType $neuronType
if [ $? != 0 ]; then
	echo "Something went wrong during plot_network_simulation.py, aborting!"
	exit -1
fi
##################################################################################################
echo "JOB END "`date` 
